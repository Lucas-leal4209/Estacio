#include <stdio.h>
#include <stdlib.h>

struct Node {
    int item;
    struct Node* prox;
};
typedef struct Node node;

int tam = 0;

int vazia(node* PILHA) {
    return (PILHA->prox == NULL);
}

void POP(node* PILHA) {
    if (vazia(PILHA)) {
        printf("Pilha vazia. ImpossÃ­vel realizar POP.\n");
        return;
    }

    node* temp = PILHA->prox;
    PILHA->prox = temp->prox;
    free(temp);

    tam--;
}

void IMPRIME(node* PILHA) {
    if (vazia(PILHA)) {
        printf("PILHA vazia!\n\n");
        return;
    }

    node* tmp = PILHA->prox;

    printf("\nPILHA:");
    while (tmp != NULL) {
        printf("%3d", tmp->item);
        tmp = tmp->prox;
    }

    printf("\nQtde itens PILHA: %d\n", tam);
}

void PUSH(node* PILHA, int valor) {
    node* novo = (node*)malloc(sizeof(node));
    novo->item = valor;
    novo->prox = NULL;

    if (vazia(PILHA))
        PILHA->prox = novo;
    else {
        node* tmp = PILHA->prox;
        while (tmp->prox != NULL) {
            tmp = tmp->prox;
        }
        tmp->prox = novo;
    }

    tam++;
}

int main() {
    node* PILHA = (node*)malloc(sizeof(node));
    PILHA->prox = NULL;

    PUSH(PILHA, 1);
    PUSH(PILHA, 2);
    PUSH(PILHA, 3);
    PUSH(PILHA, 4);
    PUSH(PILHA, 5);
    PUSH(PILHA, 6);
    IMPRIME(PILHA);

    POP(PILHA);
    POP(PILHA);
    IMPRIME(PILHA);
    
    free(PILHA);
    return 0;
}
