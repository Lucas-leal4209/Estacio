// Lucas Pedro Ferreira Leal Silva
// 202204190141

import React, { useState } from 'react';
import { View, Text, Button, FlatList, TextInput, StyleSheet, Modal, TouchableOpacity } from 'react-native';

const atividadesIniciais = [
  { id: '1', nome: 'Jantar em família', pontos: 10 },
  { id: '2', nome: 'Noite de jogos', pontos: 15 },
  { id: '3', nome: 'Caminhada juntos', pontos: 8 },
  { id: '4', nome: 'Sessão de filmes', pontos: 12 },
  { id: '5', nome: 'Café da manhã sem celular', pontos: 10 },
  { id: '6', nome: 'Leitura em grupo', pontos: 7 },
];

export default function App() {
  const [atividades, setAtividades] = useState(atividadesIniciais);
  const [pontosTotais, setPontosTotais] = useState(0);
  const [novaAtividade, setNovaAtividade] = useState('');
  const [pontosNovaAtividade, setPontosNovaAtividade] = useState('');
  const [modalVisible, setModalVisible] = useState(false);

  const registrarAtividade = (pontos) => {
    setPontosTotais(pontosTotais + pontos);
  };

  const adicionarAtividade = () => {
    if (novaAtividade && pontosNovaAtividade) {
      const nova = {
        id: (atividades.length + 1).toString(),
        nome: novaAtividade,
        pontos: parseInt(pontosNovaAtividade),
      };
      setAtividades([...atividades, nova]);
      setNovaAtividade('');
      setPontosNovaAtividade('');
      setModalVisible(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Atividades em Família</Text>
      <FlatList
        data={atividades}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.itemContainer}>
            <Text>{item.nome} - {item.pontos} pontos</Text>
            <Button title="Concluir" onPress={() => registrarAtividade(item.pontos)} />
          </View>
        )}
      />
      <Text style={styles.pontos}>Total de Pontos: {pontosTotais}</Text>

      <TouchableOpacity style={styles.addButton} onPress={() => setModalVisible(true)}>
        <Text style={styles.addButtonText}>+ Nova Atividade</Text>
      </TouchableOpacity>

      <Modal visible={modalVisible} animationType="slide">
        <View style={styles.modalContent}>
          <Text style={styles.modalTitle}>Adicionar Nova Atividade</Text>
          <TextInput
            style={styles.input}
            placeholder="Nome da Atividade"
            value={novaAtividade}
            onChangeText={setNovaAtividade}
          />
          <TextInput
            style={styles.input}
            placeholder="Pontos"
            keyboardType="numeric"
            value={pontosNovaAtividade}
            onChangeText={setPontosNovaAtividade}
          />
          <Button title="Adicionar" onPress={adicionarAtividade} />
          <Button title="Cancelar" color="red" onPress={() => setModalVisible(false)} />
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    paddingTop: 40,
  },
  title: {
    fontSize: 24,
    marginBottom: 10,
  },
  itemContainer: {
    marginVertical: 10,
    borderBottomWidth: 1,
    borderColor: '#ccc',
    paddingBottom: 10,
  },
  pontos: {
    fontSize: 18,
    marginTop: 20,
  },
  addButton: {
    marginTop: 20,
    backgroundColor: '#4CAF50',
    padding: 12,
    borderRadius: 10,
    alignItems: 'center',
  },
  addButtonText: {
    color: 'white',
    fontSize: 16,
  },
  modalContent: {
    flex: 1,
    justifyContent: 'center',
    padding: 20,
  },
  modalTitle: {
    fontSize: 22,
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#aaa',
    borderRadius: 8,
    padding: 10,
    marginBottom: 15,
  },
});


// App.js
import React, { useState } from 'react';
import { View, Text, Button, FlatList, TextInput, StyleSheet, Modal, TouchableOpacity } from 'react-native';

const atividadesIniciais = [
  { id: '1', nome: 'Jantar em família', pontos: 10 },
  { id: '2', nome: 'Noite de jogos', pontos: 15 },
  { id: '3', nome: 'Caminhada juntos', pontos: 8 },
  { id: '4', nome: 'Sessão de filmes', pontos: 12 },
  { id: '5', nome: 'Café da manhã sem celular', pontos: 10 },
  { id: '6', nome: 'Leitura em grupo', pontos: 7 },
];

export default function App() {
  const [atividades, setAtividades] = useState(atividadesIniciais);
  const [pontosTotais, setPontosTotais] = useState(0);
  const [novaAtividade, setNovaAtividade] = useState('');
  const [pontosNovaAtividade, setPontosNovaAtividade] = useState('');
  const [modalVisible, setModalVisible] = useState(false);

  const registrarAtividade = (pontos) => {
    setPontosTotais(pontosTotais + pontos);
  };

  const adicionarAtividade = () => {
    if (novaAtividade && pontosNovaAtividade) {
      const nova = {
        id: (atividades.length + 1).toString(),
        nome: novaAtividade,
        pontos: parseInt(pontosNovaAtividade),
      };
      setAtividades([...atividades, nova]);
      setNovaAtividade('');
      setPontosNovaAtividade('');
      setModalVisible(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Atividades em Família</Text>
      <FlatList
        data={atividades}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => (
          <View style={styles.itemContainer}>
            <Text>{item.nome} - {item.pontos} pontos</Text>
            <Button title="Concluir" onPress={() => registrarAtividade(item.pontos)} />
          </View>
        )}
      />
      <Text style={styles.pontos}>Total de Pontos: {pontosTotais}</Text>

      <TouchableOpacity style={styles.addButton} onPress={() => setModalVisible(true)}>
        <Text style={styles.addButtonText}>+ Nova Atividade</Text>
      </TouchableOpacity>

      <Modal visible={modalVisible} animationType="slide">
        <View style={styles.modalContent}>
          <Text style={styles.modalTitle}>Adicionar Nova Atividade</Text>
          <TextInput
            style={styles.input}
            placeholder="Nome da Atividade"
            value={novaAtividade}
            onChangeText={setNovaAtividade}
          />
          <TextInput
            style={styles.input}
            placeholder="Pontos"
            keyboardType="numeric"
            value={pontosNovaAtividade}
            onChangeText={setPontosNovaAtividade}
          />
          <Button title="Adicionar" onPress={adicionarAtividade} />
          <Button title="Cancelar" color="red" onPress={() => setModalVisible(false)} />
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    paddingTop: 40,
  },
  title: {
    fontSize: 24,
    marginBottom: 10,
  },
  itemContainer: {
    marginVertical: 10,
    borderBottomWidth: 1,
    borderColor: '#ccc',
    paddingBottom: 10,
  },
  pontos: {
    fontSize: 18,
    marginTop: 20,
  },
  addButton: {
    marginTop: 20,
    backgroundColor: '#4CAF50',
    padding: 12,
    borderRadius: 10,
    alignItems: 'center',
  },
  addButtonText: {
    color: 'white',
    fontSize: 16,
  },
  modalContent: {
    flex: 1,
    justifyContent: 'center',
    padding: 20,
  },
  modalTitle: {
    fontSize: 22,
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#aaa',
    borderRadius: 8,
    padding: 10,
    marginBottom: 15,
  },
});

/*
Descrição técnica do aplicativo:

Este aplicativo Android, desenvolvido em React Native, tem como objetivo estimular atividades em grupo dentro do ambiente familiar, promovendo maior interação e tempo de qualidade entre seus membros. A seguir, as principais funcionalidades e estrutura técnica:

1. Lista de Atividades Padrão:
   - O aplicativo é iniciado com uma lista pré-definida de atividades familiares comuns, como "Jantar em família" ou "Noite de jogos".

2. Registro de Pontuação:
   - Cada atividade possui uma quantidade de pontos associada.
   - Ao marcar uma atividade como concluída, os pontos são somados ao total da família.

3. Criação de Novas Atividades:
   - Os usuários podem adicionar novas atividades personalizadas com nome e valor de pontuação.
   - As atividades adicionadas são integradas dinamicamente à lista principal.

4. Interface com Modal:
   - Um modal é utilizado para entrada de dados ao adicionar novas atividades, garantindo uma experiência de usuário fluida e organizada.

5. Armazenamento em Estado:
   - O estado da aplicação é gerenciado com hooks (useState) para controle da lista de atividades, pontos totais, e modal.

6. Interface de Usuário:
   - Utiliza componentes nativos como View, Text, FlatList, Button, TextInput, Modal e TouchableOpacity.
   - O design é simples, responsivo e voltado à clareza visual, com uso de estilos personalizados via StyleSheet.

7. Uso Educacional:
   - O projeto serve como uma ferramenta de extensão universitária, aplicando conhecimentos práticos de desenvolvimento mobile com React Native, além de promover impacto social positivo na vida familiar.
*/
